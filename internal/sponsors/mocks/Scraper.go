// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks_test

import mock "github.com/stretchr/testify/mock"

// Scraper is an autogenerated mock type for the Scraper type
type Scraper struct {
	mock.Mock
}

type Scraper_Expecter struct {
	mock *mock.Mock
}

func (_m *Scraper) EXPECT() *Scraper_Expecter {
	return &Scraper_Expecter{mock: &_m.Mock}
}

// FindDataSourceURL provides a mock function with given fields: _a0, _a1
func (_m *Scraper) FindDataSourceURL(_a0 string, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scraper_FindDataSourceURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDataSourceURL'
type Scraper_FindDataSourceURL_Call struct {
	*mock.Call
}

// FindDataSourceURL is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *Scraper_Expecter) FindDataSourceURL(_a0 interface{}, _a1 interface{}) *Scraper_FindDataSourceURL_Call {
	return &Scraper_FindDataSourceURL_Call{Call: _e.mock.On("FindDataSourceURL", _a0, _a1)}
}

func (_c *Scraper_FindDataSourceURL_Call) Run(run func(_a0 string, _a1 string)) *Scraper_FindDataSourceURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Scraper_FindDataSourceURL_Call) Return(_a0 string, _a1 error) *Scraper_FindDataSourceURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scraper_FindDataSourceURL_Call) RunAndReturn(run func(string, string) (string, error)) *Scraper_FindDataSourceURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetContent provides a mock function with given fields: _a0
func (_m *Scraper) GetContent(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scraper_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type Scraper_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - _a0 string
func (_e *Scraper_Expecter) GetContent(_a0 interface{}) *Scraper_GetContent_Call {
	return &Scraper_GetContent_Call{Call: _e.mock.On("GetContent", _a0)}
}

func (_c *Scraper_GetContent_Call) Run(run func(_a0 string)) *Scraper_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Scraper_GetContent_Call) Return(_a0 []byte, _a1 error) *Scraper_GetContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scraper_GetContent_Call) RunAndReturn(run func(string) ([]byte, error)) *Scraper_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewScraper creates a new instance of Scraper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScraper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scraper {
	mock := &Scraper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
