// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks_test

import mock "github.com/stretchr/testify/mock"

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

type Processor_Expecter struct {
	mock *mock.Mock
}

func (_m *Processor) EXPECT() *Processor_Expecter {
	return &Processor_Expecter{mock: &_m.Mock}
}

// ProcessRawData provides a mock function with given fields: data
func (_m *Processor) ProcessRawData(data []byte) ([]map[string]string, error) {
	ret := _m.Called(data)

	var r0 []map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]map[string]string, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) []map[string]string); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processor_ProcessRawData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessRawData'
type Processor_ProcessRawData_Call struct {
	*mock.Call
}

// ProcessRawData is a helper method to define mock.On call
//   - data []byte
func (_e *Processor_Expecter) ProcessRawData(data interface{}) *Processor_ProcessRawData_Call {
	return &Processor_ProcessRawData_Call{Call: _e.mock.On("ProcessRawData", data)}
}

func (_c *Processor_ProcessRawData_Call) Run(run func(data []byte)) *Processor_ProcessRawData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Processor_ProcessRawData_Call) Return(_a0 []map[string]string, _a1 error) *Processor_ProcessRawData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Processor_ProcessRawData_Call) RunAndReturn(run func([]byte) ([]map[string]string, error)) *Processor_ProcessRawData_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Processor {
	mock := &Processor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
