// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks_test

import mock "github.com/stretchr/testify/mock"

// GenerativeAI is an autogenerated mock type for the GenerativeAI type
type GenerativeAI struct {
	mock.Mock
}

type GenerativeAI_Expecter struct {
	mock *mock.Mock
}

func (_m *GenerativeAI) EXPECT() *GenerativeAI_Expecter {
	return &GenerativeAI_Expecter{mock: &_m.Mock}
}

// GenerateContent provides a mock function with given fields: _a0
func (_m *GenerativeAI) GenerateContent(_a0 []string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerativeAI_GenerateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateContent'
type GenerativeAI_GenerateContent_Call struct {
	*mock.Call
}

// GenerateContent is a helper method to define mock.On call
//   - _a0 []string
func (_e *GenerativeAI_Expecter) GenerateContent(_a0 interface{}) *GenerativeAI_GenerateContent_Call {
	return &GenerativeAI_GenerateContent_Call{Call: _e.mock.On("GenerateContent", _a0)}
}

func (_c *GenerativeAI_GenerateContent_Call) Run(run func(_a0 []string)) *GenerativeAI_GenerateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *GenerativeAI_GenerateContent_Call) Return(_a0 string) *GenerativeAI_GenerateContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenerativeAI_GenerateContent_Call) RunAndReturn(run func([]string) string) *GenerativeAI_GenerateContent_Call {
	_c.Call.Return(run)
	return _c
}

// RefineSearch provides a mock function with given fields: _a0
func (_m *GenerativeAI) RefineSearch(_a0 []map[string]string) ([]map[string]string, error) {
	ret := _m.Called(_a0)

	var r0 []map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func([]map[string]string) ([]map[string]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]map[string]string) []map[string]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]map[string]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerativeAI_RefineSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefineSearch'
type GenerativeAI_RefineSearch_Call struct {
	*mock.Call
}

// RefineSearch is a helper method to define mock.On call
//   - _a0 []map[string]string
func (_e *GenerativeAI_Expecter) RefineSearch(_a0 interface{}) *GenerativeAI_RefineSearch_Call {
	return &GenerativeAI_RefineSearch_Call{Call: _e.mock.On("RefineSearch", _a0)}
}

func (_c *GenerativeAI_RefineSearch_Call) Run(run func(_a0 []map[string]string)) *GenerativeAI_RefineSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]map[string]string))
	})
	return _c
}

func (_c *GenerativeAI_RefineSearch_Call) Return(_a0 []map[string]string, _a1 error) *GenerativeAI_RefineSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GenerativeAI_RefineSearch_Call) RunAndReturn(run func([]map[string]string) ([]map[string]string, error)) *GenerativeAI_RefineSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenerativeAI creates a new instance of GenerativeAI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenerativeAI(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenerativeAI {
	mock := &GenerativeAI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
